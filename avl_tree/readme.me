# Implementations in C Language - AVL Tree (Based on Jayme Luiz's Data Structure)

This project contains implementations of AVL trees in the C language, based on the data structure of Professor Jayme Luiz.

## Implementations

1. **Insertion and Deletion in AVL**: Implementation of insertion and deletion functions in an AVL tree. These implementations follow the data structure taught by Professor Jayme Luiz.

2. **AVL Verification**: Implementation of a function that checks if a tree is an AVL tree. This is done by calculating the heights of the subtrees for each node and verifying if the 'bal' field of each node is correct.

3. **Node Counting**: Implementation of a function that counts the number of nodes in an AVL tree.

## Tests

1. **Creation of 1,000 AVL Trees**: Create 1,000 AVL trees based on Professor Jayme Luiz's data structure.

2. **Random Insertion**: In each AVL tree, insert 10,000 nodes randomly, with each node's key between 0 and 100,000. Verify if each AVL tree has the 10,000 nodes using the node counting algorithm.

3. **AVL Verification**: After all insertions, check if the tree is an AVL tree using the verification algorithm.

4. **Node Deletion**: Remove 1,000 nodes from the trees (verify if each AVL tree has 9,000 nodes using the node counting algorithm).

5. **AVL Verification After Deletion**: After all deletions, verify again if the tree is an AVL tree using the verification algorithm.

You do not need to keep 1,000 AVL trees in memory at the same time; you can process them one at a time.